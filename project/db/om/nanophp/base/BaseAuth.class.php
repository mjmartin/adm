<?php
/*************************************************************************************************************************
**************************************************************************************************************************
**************************************************************************************************************************

WARNING!!!

THIS FILE SHOULD NOT BE EDITED - IT WILL BE AUTOGENERATED EACH TIME THE MODELS ARE BUILT!

OVERRIDE SETTINGS IN MODEL NOT THE BASEMODEL

**************************************************************************************************************************
**************************************************************************************************************************
*************************************************************************************************************************/

namespace project\db\om\nanophp\base;

/**
 * BaseAuth class 
 * 
 * BaseAuth
 * 
 * @author Christopher Beck <cwbeck@gmail.com>
 * @version SVN: $id
 * @package nanophp
 * @subpackage base
 */
class BaseAuth extends \nano\core\db\om\Base {

	protected $modelName = 'Auth';
	protected $primaryKey = array('id');
	protected $dbConfig = 'default';
	protected $dbName = 'nanophp';
	protected $tableName = 'Auths';
	protected $fields = array(
		'id' => array(
			'mysql_type' => 'int(11)',
			'mysql_is_null' => 'NO',
			'mysql_key' => 'PRI',
			'mysql_default' => '',
			'mysql_extra' => 'auto_increment',
			'is_foreign_reference' => false,
			'use_model' => 'Auth',
			'use_database' => 'nanophp',
			'set_function' => 'setId',
			'validation_function' => 'validateId',
			'get_function' => 'getId',
		),
		'type' => array(
			'mysql_type' => 'varchar(255)',
			'mysql_is_null' => 'NO',
			'mysql_key' => '',
			'mysql_default' => '',
			'mysql_extra' => '',
			'is_foreign_reference' => false,
			'use_model' => 'Auth',
			'use_database' => 'nanophp',
			'set_function' => 'setType',
			'validation_function' => 'validateType',
			'get_function' => 'getType',
		),
		'uid' => array(
			'mysql_type' => 'int(11)',
			'mysql_is_null' => 'NO',
			'mysql_key' => '',
			'mysql_default' => '',
			'mysql_extra' => '',
			'is_foreign_reference' => false,
			'use_model' => 'Auth',
			'use_database' => 'nanophp',
			'set_function' => 'setUid',
			'validation_function' => 'validateUid',
			'get_function' => 'getUid',
		),
		'fuid' => array(
			'mysql_type' => 'char(255)',
			'mysql_is_null' => 'NO',
			'mysql_key' => 'MUL',
			'mysql_default' => '',
			'mysql_extra' => '',
			'is_foreign_reference' => false,
			'use_model' => 'Auth',
			'use_database' => 'nanophp',
			'set_function' => 'setFuid',
			'validation_function' => 'validateFuid',
			'get_function' => 'getFuid',
		),
		'perams' => array(
			'mysql_type' => 'char(255)',
			'mysql_is_null' => 'NO',
			'mysql_key' => '',
			'mysql_default' => '',
			'mysql_extra' => '',
			'is_foreign_reference' => false,
			'use_model' => 'Auth',
			'use_database' => 'nanophp',
			'set_function' => 'setPerams',
			'validation_function' => 'validatePerams',
			'get_function' => 'getPerams',
		)
	);
	protected $newFieldNameMap = array(
		'id' => 'id',
		'type' => 'type',
		'uid' => 'uid',
		'fuid' => 'fuid',
		'perams' => 'perams'
	);
	public function setId($value){
		if(\project\db\om\nanophp\Auth::validateId($value)){
			$this->id = $value;
		} else {
			throw new \nano\core\exception\ValidationException('Validation of column `id` failed');
		}
	}
	public function setType($value){
		if(\project\db\om\nanophp\Auth::validateType($value)){
			$this->type = $value;
		} else {
			throw new \nano\core\exception\ValidationException('Validation of column `type` failed');
		}
	}
	public function setUid($value){
		if(\project\db\om\nanophp\Auth::validateUid($value)){
			$this->uid = $value;
		} else {
			throw new \nano\core\exception\ValidationException('Validation of column `uid` failed');
		}
	}
	public function setFuid($value){
		if(\project\db\om\nanophp\Auth::validateFuid($value)){
			$this->fuid = $value;
		} else {
			throw new \nano\core\exception\ValidationException('Validation of column `fuid` failed');
		}
	}
	public function setPerams($value){
		if(\project\db\om\nanophp\Auth::validatePerams($value)){
			$this->perams = $value;
		} else {
			throw new \nano\core\exception\ValidationException('Validation of column `perams` failed');
		}
	}
	public function getId(){
		return $this->id;
	}
	public function getType(){
		return $this->type;
	}
	public function getUid(){
		return $this->uid;
	}
	public function getFuid(){
		return $this->fuid;
	}
	public function getPerams(){
		return $this->perams;
	}
	public static function validateId($value){
		return true;
	}
	public static function validateType($value){
		return true;
	}
	public static function validateUid($value){
		return true;
	}
	public static function validateFuid($value){
		return true;
	}
	public static function validatePerams($value){
		return true;
	}
	
}