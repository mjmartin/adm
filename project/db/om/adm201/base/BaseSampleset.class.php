<?php
/*************************************************************************************************************************
**************************************************************************************************************************
**************************************************************************************************************************

WARNING!!!

THIS FILE SHOULD NOT BE EDITED - IT WILL BE AUTOGENERATED EACH TIME THE MODELS ARE BUILT!

OVERRIDE SETTINGS IN MODEL NOT THE BASEMODEL

**************************************************************************************************************************
**************************************************************************************************************************
*************************************************************************************************************************/

namespace project\db\om\adm201\base;

/**
 * BaseSampleset class 
 * 
 * BaseSampleset
 * 
 * @author Christopher Beck <cwbeck@gmail.com>
 * @version SVN: $id
 * @package adm201
 * @subpackage base
 */
class BaseSampleset extends \nano\core\db\om\Base {

	protected $modelName = 'Sampleset';
	protected $primaryKey = array('id');
	protected $dbConfig = 'default';
	protected $dbName = 'adm201';
	protected $tableName = 'Sampleset';
	protected $fields = array(
		'id' => array(
			'mysql_type' => 'int(11) unsigned',
			'mysql_is_null' => 'NO',
			'mysql_key' => 'PRI',
			'mysql_default' => '',
			'mysql_extra' => 'auto_increment',
			'is_foreign_reference' => false,
			'use_model' => 'Sampleset',
			'use_database' => 'adm201',
			'set_function' => 'setId',
			'validation_function' => 'validateId',
			'get_function' => 'getId',
		),
		'notes' => array(
			'mysql_type' => 'mediumtext',
			'mysql_is_null' => 'YES',
			'mysql_key' => '',
			'mysql_default' => '',
			'mysql_extra' => '',
			'is_foreign_reference' => false,
			'use_model' => 'Sampleset',
			'use_database' => 'adm201',
			'set_function' => 'setNotes',
			'validation_function' => 'validateNotes',
			'get_function' => 'getNotes',
		),
		'url' => array(
			'mysql_type' => 'mediumtext',
			'mysql_is_null' => 'YES',
			'mysql_key' => '',
			'mysql_default' => '',
			'mysql_extra' => '',
			'is_foreign_reference' => false,
			'use_model' => 'Sampleset',
			'use_database' => 'adm201',
			'set_function' => 'setUrl',
			'validation_function' => 'validateUrl',
			'get_function' => 'getUrl',
		),
		'date_collected' => array(
			'mysql_type' => 'datetime',
			'mysql_is_null' => 'YES',
			'mysql_key' => '',
			'mysql_default' => '',
			'mysql_extra' => '',
			'is_foreign_reference' => false,
			'use_model' => 'Sampleset',
			'use_database' => 'adm201',
			'set_function' => 'setDateCollected',
			'validation_function' => 'validateDateCollected',
			'get_function' => 'getDateCollected',
		)
	);
	protected $newFieldNameMap = array(
		'id' => 'id',
		'notes' => 'notes',
		'url' => 'url',
		'date_collected' => 'date_collected'
	);
	public function setId($value){
		if(\project\db\om\adm201\Sampleset::validateId($value)){
			$this->id = $value;
		} else {
			throw new \nano\core\exception\ValidationException('Validation of column `id` failed');
		}
	}
	public function setNotes($value){
		if(\project\db\om\adm201\Sampleset::validateNotes($value)){
			$this->notes = $value;
		} else {
			throw new \nano\core\exception\ValidationException('Validation of column `notes` failed');
		}
	}
	public function setUrl($value){
		if(\project\db\om\adm201\Sampleset::validateUrl($value)){
			$this->url = $value;
		} else {
			throw new \nano\core\exception\ValidationException('Validation of column `url` failed');
		}
	}
	public function setDateCollected($value){
		if(\project\db\om\adm201\Sampleset::validateDateCollected($value)){
			$this->date_collected = $value;
		} else {
			throw new \nano\core\exception\ValidationException('Validation of column `date_collected` failed');
		}
	}
	public function getId(){
		return $this->id;
	}
	public function getNotes(){
		return $this->notes;
	}
	public function getUrl(){
		return $this->url;
	}
	public function getDateCollected(){
		return $this->date_collected;
	}
	public static function validateId($value){
		return true;
	}
	public static function validateNotes($value){
		return true;
	}
	public static function validateUrl($value){
		return true;
	}
	public static function validateDateCollected($value){
		return true;
	}
	
}